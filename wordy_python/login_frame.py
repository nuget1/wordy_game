#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    May 17, 2023 06:20:00 PM CST  platform: Windows NT

import sys
import tkinter as tk
from tkinter import messagebox as mb
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import login_frame_support
import game_menu_frame_support
from wordy_idl import *

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 




_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    _style_code_ran = 1


class Toplevel1:

    def login_functionality(self):
        try:
            if self.usernameField.get() == "" or self.passwordField.get() == "":
                raise IncompleteCredentialsException()
            player_id = self.gameMenuServant.logIn(self.usernameField.get(), self.passwordField.get())

            mb.showinfo(title="Logged in", message=f"Successfully logged in as {self.usernameField.get()}")

            self.top.withdraw()
            game_menu_frame_support.main(self.gameMenuServant, self.top, player_id, self.usernameField.get(), self.namingContext)

            self.usernameField.delete(0, 'end')
            self.passwordField.delete(0, 'end')

        except InvalidPasswordException:
            mb.showinfo("Invalid password", "Your password is incorrect")
        except NoUserFoundException:
            mb.showinfo("No user found", "No user of the given username exists")
        except LoggedInException:
            mb.showinfo("Already logged in", "You are already logged in from another machine.")
        except IncompleteCredentialsException:
            mb.showinfo("Incomplete credentials", "Please fill in the missing fields before you log in")





    def exitButtonLogin_functionality(self):
        sys.exit(0)

    def implement_components(self):
        self.loginButton.configure(command=self.login_functionality)
        self.exitButtonLogin.configure(command=self.exitButtonLogin_functionality)


    def __init__(self, top=None, gameMenuServant=None, namingContext=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("456x294+468+138")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(0,  0)
        top.title("Login to Wordy")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.gameMenuServant = gameMenuServant
        self.namingContext = namingContext

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(relx=0.022, rely=0.068, relheight=0.901
                , relwidth=0.954)
        self.Frame1.configure(relief='solid')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="solid")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        _style_code()
        self.usernameLabel = ttk.Label(self.Frame1)
        self.usernameLabel.place(relx=0.074, rely=0.147, height=45, width=142)
        self.usernameLabel.configure(background="#d9d9d9")
        self.usernameLabel.configure(foreground="#000000")
        self.usernameLabel.configure(font="TkDefaultFont")
        self.usernameLabel.configure(relief="flat")
        self.usernameLabel.configure(anchor='w')
        self.usernameLabel.configure(justify='left')
        self.usernameLabel.configure(text='''Username:''')
        self.usernameLabel.configure(compound='left')
        self.usernameField = ttk.Entry(self.Frame1)
        self.usernameField.place(relx=0.326, rely=0.147, relheight=0.158
                , relwidth=0.616)
        self.usernameField.configure(takefocus="")
        self.usernameField.configure(cursor="fleur")
        self.TLabel2 = ttk.Label(self.Frame1)
        self.TLabel2.place(relx=0.074, rely=0.445, height=37, width=106)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Password:''')
        self.TLabel2.configure(compound='left')
        self.passwordField = ttk.Entry(self.Frame1)
        self.passwordField.place(relx=0.326, rely=0.445, relheight=0.155
                , relwidth=0.586)
        self.passwordField.configure(show="*")
        self.passwordField.configure(takefocus="")
        self.passwordField.configure(cursor="ibeam")
        self.loginButton = ttk.Button(self.Frame1)
        self.loginButton.place(relx=0.211, rely=0.83, height=25, width=76)
        self.loginButton.configure(takefocus="")
        self.loginButton.configure(text='''Login''')
        self.loginButton.configure(compound='left')
        self.exitButtonLogin = ttk.Button(self.Frame1)
        self.exitButtonLogin.place(relx=0.566, rely=0.83, height=25, width=76)
        self.exitButtonLogin.configure(takefocus="")
        self.exitButtonLogin.configure(text='''Exit''')
        self.exitButtonLogin.configure(compound='left')
        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)
        self.implement_components()


def start_up():
    login_frame_support.main()

if __name__ == '__main__':
    login_frame_support.main()




