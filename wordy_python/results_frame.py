#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    May 20, 2023 05:33:58 PM CST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import results_frame_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Treeview',  font="TkDefaultFont")
    _style_code_ran = 1

class Toplevel1:

    def update_users_and_wins_table(self):
        for row in self.users_and_wins:
            player_name = row[0]
            wins = row[1]

            self.current_game_leaderboards_treeview.insert('', tk.END, values=(player_name, wins,))

    def __init__(self, top=None, users_and_wins=None, winner_name=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+468+138")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("Current Game Results")
        top.configure(background="#d9d9d9")

        self.top = top
        self.users_and_wins = users_and_wins
        self.winner_name = winner_name

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(relx=0.033, rely=0.022, relheight=0.922
                , relwidth=0.925)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.the_winner_is_label = tk.Label(self.Frame1)
        self.the_winner_is_label.place(relx=0.018, rely=0.024, height=24
                , width=104)
        self.the_winner_is_label.configure(anchor='w')
        self.the_winner_is_label.configure(background="#d9d9d9")
        self.the_winner_is_label.configure(compound='left')
        self.the_winner_is_label.configure(disabledforeground="#a3a3a3")
        self.the_winner_is_label.configure(foreground="#000000")
        self.the_winner_is_label.configure(text='''The winner is:''')
        self.winner_name_label = tk.Label(self.Frame1)
        self.winner_name_label.place(relx=0.018, rely=0.072, height=26
                , width=324)
        self.winner_name_label.configure(anchor='w')
        self.winner_name_label.configure(background="#d9d9d9")
        self.winner_name_label.configure(compound='left')
        self.winner_name_label.configure(disabledforeground="#a3a3a3")
        self.winner_name_label.configure(foreground="#000000")
        self.winner_name_label.configure(text=winner_name)
        _style_code()
        self.TSeparator1 = ttk.Separator(self.Frame1)
        self.TSeparator1.place(relx=0.004, rely=0.149,  relwidth=0.991)
        self.current_game_leaderboards_label = tk.Label(self.Frame1)
        self.current_game_leaderboards_label.place(relx=0.018, rely=0.169
                , height=21, width=154)
        self.current_game_leaderboards_label.configure(anchor='w')
        self.current_game_leaderboards_label.configure(background="#d9d9d9")
        self.current_game_leaderboards_label.configure(compound='left')
        self.current_game_leaderboards_label.configure(disabledforeground="#a3a3a3")
        self.current_game_leaderboards_label.configure(foreground="#000000")
        self.current_game_leaderboards_label.configure(text='''Current Game Leaderboards''')
        self.current_game_leaderboards_treeview = ScrolledTreeView(self.Frame1, show='headings')
        self.current_game_leaderboards_treeview.place(relx=0.036, rely=0.241
                , relheight=0.643, relwidth=0.937)
        self.current_game_leaderboards_treeview.configure(columns=("Col1","Col2",))
        # build_treeview_support starting.
        self.current_game_leaderboards_treeview.heading("#0",text="Player")
        self.current_game_leaderboards_treeview.heading("#0",anchor="center")
        self.current_game_leaderboards_treeview.column("#0",width="250")
        self.current_game_leaderboards_treeview.column("#0",minwidth="20")
        self.current_game_leaderboards_treeview.column("#0",stretch="1")
        self.current_game_leaderboards_treeview.column("#0",anchor="w")
        self.current_game_leaderboards_treeview.heading("Col1",text="Players")
        self.current_game_leaderboards_treeview.heading("Col1",anchor="center")
        self.current_game_leaderboards_treeview.column("Col1",width="251")
        self.current_game_leaderboards_treeview.column("Col1",minwidth="20")
        self.current_game_leaderboards_treeview.column("Col1",stretch="1")
        self.current_game_leaderboards_treeview.column("Col1",anchor="w")
        self.current_game_leaderboards_treeview.heading("Col2",text="Wins")
        self.current_game_leaderboards_treeview.heading("Col2",anchor="center")
        self.current_game_leaderboards_treeview.column("Col2",width="251")
        self.current_game_leaderboards_treeview.column("Col2",minwidth="20")
        self.current_game_leaderboards_treeview.column("Col2",stretch="1")
        self.current_game_leaderboards_treeview.column("Col2",anchor="w")
        self.waiting_next_round_label = tk.Label(self.Frame1)
        self.waiting_next_round_label.place(relx=0.036, rely=0.916, height=31
                , width=174)
        self.waiting_next_round_label.configure(anchor='w')
        self.waiting_next_round_label.configure(background="#d9d9d9")
        self.waiting_next_round_label.configure(compound='left')
        self.waiting_next_round_label.configure(disabledforeground="#a3a3a3")
        self.waiting_next_round_label.configure(foreground="#000000")
        self.waiting_next_round_label.configure(text='''Waiting for the next round...''')

        self.update_users_and_wins_table()

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    results_frame_support.main()

if __name__ == '__main__':
    results_frame_support.main()




